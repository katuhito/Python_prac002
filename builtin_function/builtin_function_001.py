"""組み込み関数"""
"""isunstance(),issubclass() 動的な型判定"""
"""isinstance()は、第1引数に渡したインスタンスオブジェクトが、第2引数に渡したクラスに属していれば、
   Trueを返す。
   第2引数をタプルにすると、複数のクラスで同時に比較することができる。
   複数のクラスで比較する場合は、いずれかのクラスに属していればTrueとなる。
"""

"""issubcluss()は、isinstance()とほぼ同じであるが、第1引数にクラスオブジェクトをとる点が
   異なる。
"""

"""callable() 呼び出し可能なオブジェクトを判定"""
"""Pythonでは、関数やクラス、メソッドなど、()を付けて呼び出せるオブジェクトを呼び出し可能オブジェクトと呼ぶ。callable()は、引数に渡したオブジェクトが呼び出し可能なオブジェクトかどうかの判定を行う組み込み関数である
"""
"""特殊メソッド__call__()を持つインスタンスも()を付けて呼び出しことができる。そのため、関数やクラス、メソッドと同様に特殊メソッド__call__()を持つインスタンスもcallable()はTrueを返す。
"""



"""オブジェクトの属性に関する関数"""
"""hasattr() オブジェクトの属性の有無を判定"""
"""hasattr()は第1引数のオブジェクトが、第2引数の名前の属性を持っている場合のみTrueを返す。利用する属性が限られている場合は、isinstance()によるクラスの確認よりも、hasattr()で必要な属性のみを確認する方が柔軟性が向上する。
"""

"""getattr(), setattr(), delattr()  オブジェクトの属性を操作する"""
"""これらの組み込み関数は、オブジェクトの属性を属性名の文字列を使って操作することができる。これらを利用すると、第1引数として渡したオブジェクトの属性を動的に操作でき、非常に柔軟なプログラムを作成することができる。
ただし、多用するとコードの可動性や保守性を著しく低下させるため注意が必要である。
"""
"""getattr()は、インスタンス変数だけでなく、メソッドも取得できる。このとき戻り値であるメソッドオブジェクトは、元のインスタンスに紐ついたままになる。そのため、getattr()で取得したメソッドの呼び出し時には、第1引数selfを明示的に渡す必要は無い。
"""


"""イテラブルなオブジェクトを受け取る関数"""
"""イテラブルなオブジェクト(繰り返し可能なオブジェクト)に対して処理を行う組み込み関数"""
#zip()：複数のイテラブルな要素を同時に返す。
#zip()は、複数のイテラブルな要素を受け取り、タプルを返すイテレータを作成する組み込み関数である。i番目のタプルには、それぞれのイテラブルのi番目のよう素同士がまとめられている。なお、タプルの中の要素の順番はzip()の引数の順番と一致する。

#zip()は一番短いイテラブルの長さまでしか結果を返さない。一番長い胃テラぶるに合わせたい場合には、標準ライブラリのitertools.zip_longest()関数が利用できる。

#sorted()：イテラブルの要素を並べ替える
#sorted()は、イテラブルの要素を並べ替える組み込み関数である。自分自身を並べ替えるメソッドlist.sort()栃外、結果は常に新しいオブジェクトで返される。
#引数は不変な型も受け取ることができ、戻り値は引数の型によらず常にリストである。

#sorted()では、要素同士が直接比較される。このため、数値と文字列が混在している状況ではエラーとなってしまう。このようなときには引数keyに、引数を1つだけとる関数を指定する。ソートが行われる際、この関数に各要素が渡されるため、比較に利用される値を返す。
#sorted()は安定ソートであるため、比較結果が等しい場合はもとの順序が保持される。


#filter()：イテラブルの要素を絞り込む
#filter()は、条件に沿った要素だけを含むイテレータを返す組み込み関数である。絞り込み条件は、引数をひとつだけ取る関数として第1引数で指定する。絞り込みの際には、この関数に各要素が渡されてくるので、残したい要素の時のみ真を返す。


#map()：全ての要素に関数を適用する。
#map()は、イテラブルの全要素に対して同じ関数を適用する組み込み関数である。map()の戻り値は、関数を適用した結果を返すイテレータである。適用したい関数を第1引数で指定する。
#map()には、第2引数以降に複数のイテラブルを渡すことができる。このとき、第1引数で指定する関数が受け取る引数の数は、第2引数以降に渡すイテラブルの数と一致している必要がある。
#keyとvaluesに格納された値からクエリ文字列を作成している。


#all(), any()：真理値を返す
#all(), any()はどちらもイテラブルを1つだけ引数に取り、真理値を返す組み込み関数である。all()はイテラブルの全ての要素が真の場合にTrueを返し、それ以外の場合にはFalseを返す。





