"""組み込み関数"""
"""isunstance(),issubclass() 動的な型判定"""
"""isinstance()は、第1引数に渡したインスタンスオブジェクトが、第2引数に渡したクラスに属していれば、
   Trueを返す。
   第2引数をタプルにすると、複数のクラスで同時に比較することができる。
   複数のクラスで比較する場合は、いずれかのクラスに属していればTrueとなる。
"""

"""issubcluss()は、isinstance()とほぼ同じであるが、第1引数にクラスオブジェクトをとる点が
   異なる。
"""

"""callable() 呼び出し可能なオブジェクトを判定"""
"""Pythonでは、関数やクラス、メソッドなど、()を付けて呼び出せるオブジェクトを呼び出し可能オブジェクトと呼ぶ。callable()は、引数に渡したオブジェクトが呼び出し可能なオブジェクトかどうかの判定を行う組み込み関数である
"""
"""特殊メソッド__call__()を持つインスタンスも()を付けて呼び出しことができる。そのため、関数やクラス、メソッドと同様に特殊メソッド__call__()を持つインスタンスもcallable()はTrueを返す。
"""



"""オブジェクトの属性に関する関数"""
"""hasattr() オブジェクトの属性の有無を判定"""
"""hasattr()は第1引数のオブジェクトが、第2引数の名前の属性を持っている場合のみTrueを返す。利用する属性が限られている場合は、isinstance()によるクラスの確認よりも、hasattr()で必要な属性のみを確認する方が柔軟性が向上する。
"""

"""getattr(), setattr(), delattr()  オブジェクトの属性を操作する"""
"""これらの組み込み関数は、オブジェクトの属性を属性名の文字列を使って操作することができる。これらを利用すると、第1引数として渡したオブジェクトの属性を動的に操作でき、非常に柔軟なプログラムを作成することができる。
ただし、多用するとコードの可動性や保守性を著しく低下させるため注意が必要である。
"""
"""getattr()は、インスタンス変数だけでなく、メソッドも取得できる。このとき戻り値であるメソッドオブジェクトは、元のインスタンスに紐ついたままになる。そのため、getattr()で取得したメソッドの呼び出し時には、第1引数selfを明示的に渡す必要は無い。
"""

